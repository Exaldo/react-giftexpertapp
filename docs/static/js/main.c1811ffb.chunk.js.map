{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OAEI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IAE7BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAKjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCNHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwB5C,OAhBIC,qBAAW,WAEPxB,EAASC,GACJwB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI1B,CAACpB,IAKDqB,EDrB6BK,CAAa1B,GAAhCa,EAHwB,EAG7BN,KAAaa,EAHgB,EAGhBA,QAUrB,OACI,qCACA,qBAAIJ,UAAW,oCAAf,cAAsDhB,EAAtD,OAECoB,GAAW,mBAAGJ,UAAU,oCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGOH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEIA,GADGA,EAAIC,aEgBbgB,EAxCM,WAAO,IAAD,EAEazC,mBAAS,CAAE,cAFxB,mBAEhB0C,EAFgB,KAEJ3C,EAFI,KAiBvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQ2C,EAAWnB,KAAM,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAaA,GADNA,YC3BnC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c1811ffb.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('') \n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        if (inputValue.trim().length>2)\n        {\n        setCategories(cats => [ inputValue, ...cats ]);\n        setInputValue(''); \n        }\n    }\n\n    return (\n        \n        <form onSubmit = {handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n                \n            />\n        </form> \n     \n    )\n\n    \n}\n\n    AddCategory.propTypes = { \n        setCategories: PropTypes.func.isRequired\n    }\n","\nexport const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=QcDw5FfDd9MXKpLjmwr9FuqF0vsxfSb0`\n    const resp = await fetch( url)\n    const {data} = await resp.json();\n\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    }\n        )\n    return gifs;\n    \n}    ","import React from 'react'\n\n\nexport const GifGridItem = ({ title, url}) => {\n    \n    // console.log(id, title, url);\n    \n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    \n   \n    const { data:images, loading} = useFetchGifs(category);\n\n  \n    \n    \n\n    \n    \n    \n\n    return (\n        <>\n        <h3 className= 'animate__animated animate__fadeIn'> { category } </h3>\n\n        {loading && <p className=\" animate__animated animate__flash\">Loading</p> }\n\n        <div className=\"card-grid\">\n           \n             { \n               images.map( img => ( \n                 <GifGridItem \n                 key = {img.id}\n                 {...img}\n                 />\n                //  <li key= {id}> {title}</li>\n              ))\n             }\n           \n        </div>\n\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n\n    });\n\n    useEffect( () => {\n         \n        getGifs( category )\n            .then(imgs => {\n                \n                    setstate({\n                        data: imgs,\n                        loading: false\n                    }); \n            })\n\n    }, [category]);\n\n\n     \n\nreturn state; //  { data: [], loading: true };\n\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n    \n    const [categories, setCategories] = useState([ 'One Punch']);\n\n    // const handleAdd = () => {\n\n    //     // setCategories([...categories, 'HunterXHunter']); //soluciòn usada por el prof. Fernando H.\n    //     // setCategories(['HunterXHunter', ...categories ]); //solución 2\n    //     // setCategories(cats => [...cats, 'HunterXHunter' ]); //solución 3\n\n\n    //     setCategories(categories.concat('HunterXHunter'));\n    //     //utilice el método .concat debido a que crea un nuevo arreglo y lo\n    //     //regresa, en cambio .push trata de mutar el arreglo original y crashea la app.\n    // }\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>  \n\n\n            <ol>\n                {\n                    categories.map ( category => (\n                        <GifGrid \n                            key= { category }\n                            category = { category } />\n                    ))\n                }\n            </ol>\n\n        </>\n    )\n}\n\n\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}